// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    And16(a=x,b=x,out=maxNegative);
    Not16(in=maxNegative,out=invMaxNegative);
    And16(a=invMaxNegative,b=maxNegative,out=zero16); //16 bit rep of zero
    Not16(in=zero16,out=maxNeg16); //16 bit rep of max negative
    And(a=x[0],b=x[0],out=And1); //0 if x[0]=0, 1 if x[0]=1
    Nand(a=x[0],b=x[0],out=Nand1); //1 if x[0]=0, 0 if x[0]=1
    And(a=And1,b=Nand1,out=zero1); //Creating a zero
    Not(in=zero1,out=one1);
    
    //if (zx == 1) sets x = 0 
    Mux16(a=x,b=zero16,sel=zx,out=zxResult);
    
    // if (nx == 1) sets x = !x 
    Not16(in=zxResult,out=zxResultNot);
    Mux16(a=zxResult,b=zxResultNot,sel=nx,out=nxResult);

     // if (zy == 1) sets y = 0
    Mux16(a=y,b=zero16,sel=zy,out=zyResult);
    
    // if (ny == 1) sets y = !y 
    Not16(in=zyResult,out=zyResultNot);
    Mux16(a=zyResult,b=zyResultNot,sel=ny,out=nyResult);
    
    // if (f == 1)  sets out = x + y 
    // if (f == 0)  sets out = x & y
    Add16(a=nxResult,b=nyResult,out=xPy);      
    And16(a=nxResult,b=nyResult,out=xAy); 
    Mux16(a=xAy,b=xPy,sel=f,out=fResult);     

    // if (no == 1) sets out = !out 
    Not16(in=fResult,out=fResultNot);
    Mux16(a=fResult,b=fResultNot,sel=no, out=firstOutput, out=out);

    //if (out == 0) zr = 1, else zr = 0
    Or16(a=firstOutput,b=zero16, out[15]=sign,out[0..7]=rightHalf,out[8..15]=leftHalf);
    Or8Way(in=rightHalf,out=rightCheckRes);
    Or8Way(in=leftHalf,out=leftCheckRes);
    Or(a=rightCheckRes,b=leftCheckRes,out=isZero); //if both are zero, we get zero
    Not(in=isZero,out=zr);
    
    //if (out < 0)  ng = 1, else ng = 0
    And(a=sign,b=one1,out=ng);

}