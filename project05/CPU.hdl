// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

    Mux16(a=instruction,b=fromALUMux,sel=instruction[15],out=toAReg); //using opcode MSB

    //A register
   Not(in=instruction[15],out=notIn15);
   Or(a=notIn15,b=instruction[5],out=toOpenA);
   ARegister(in=toAReg,load=toOpenA,out=outA,out[0..14]=addressM);

   //D register
   And(a=instruction[15],b=instruction[4],out=toOpenD);
   DRegister(in=fromALUMux,load=toOpenD,out=outD);

   //M
   And(a=instruction[15],b=instruction[3],out=writeM);

   //A - A register, C - D/M
   And(a=instruction[15],b=instruction[12],out=MselA);
   Mux16(a=outA,b=inM,sel=MselA,out=fromDownMux);

   //ALU
   ALU(x=outD,y=fromDownMux,
   zx=instruction[11],
   nx=instruction[10],
   zy=instruction[9],
   ny=instruction[8],
   f=instruction[7],
   no=instruction[6],
   out=outM,
   out=fromALUMux,
   zr=zrRes,
   ng=ngRes
   );


   //J(j1,j2,j3,zr,ng)
   //j1=jgt,j2=jeq,j3=jlt
   Not(in=zrRes,out=notZR);
   Not(in=ngRes,out=notNG);
   And(a=notZR,b=notNG,out=psRes);

   And(a=psRes,b=instruction[0],out=isPos);
   And(a=zrRes,b=instruction[1],out=isZer);
   And(a=ngRes,b=instruction[2],out=isNeg);
  
   Or(a=isPos,b=isZer,out=conc1);
   Or(a=conc1,b=isNeg,out=concJMP);

   And(a=instruction[15],b=concJMP,out=jmp);

   //PC
   PC(in=outA,load=jmp,inc=true,reset=reset,out[0..14]=pc);
}
